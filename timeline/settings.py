"""
Django settings for timeline project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import dotenv
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Add .env variables anywhere before SECRET_KEY

dotenv_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

SECRET_KEY = 'your_secret_key'
SECRET_KEY = os.environ['SECRET_KEY']  # TODO Test this
SIGNING_KEY = os.environ['SIGNING_KEY']  # TODO Test this

# Developement TODO, put in file
ALLOWED_HOSTS = ['localhost']
DEBUG = True

# Production TODO, put in file
#SECURE_SSL_REDIRECT = True
#SESSION_COOKIE_SECURE = True
#CSRF_COOKIE_SECURE = True
#JWT_AUTH_SECURE = True

SITE_ID = 1  # According to db initialization
# TODO Check reason-> https://medium.com/@pratique/social-login-with-react-and-django-i-c380fe8982e2
# TODO INITSCRIPT Ensure matching with data init

# TODO INITSCRIPT ALLOWED dynamically in init script
CORS_ALLOWED_ORIGINS = ['http://localhost:3000']
CORS_ALLOW_CREDENTIALS = True  # To allow JWT cookie (safer than WebStorage...)
CORS_EXPOSE_HEADERS = ['Access-Control-Allow-Credentials']
# CSRF_TRUSTED_ORIGINS = [    'change.allowed.com',] # TODO Need more work for comprehension/implementation
CSRF_COOKIE_HTTPONLY = True

# Application definition
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}


# JWT_ALLOW_REFRESH  = True #Todo -> Add refresh on each action or after "some" time
# -> https://jpadilla.github.io/django-rest-framework-jwt/#refresh-token

REST_USE_JWT = True
REST_SESSION_LOGIN = True  # TODO recheck after CSRF resolution
JWT_AUTH_COOKIE = 'jwt-auth'
JWT_AUTH_HTTPONLY = True
#JWT_AUTH_COOKIE_USE_CSRF = True
JWT_AUTH_REFRESH_COOKIE = 'jwt-refresh'

REST_AUTH_SERIALIZERS = {
    # serializer used in dj_rest_auth.views.LoginView
    'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',
    # serializer used for response to successful authentication in dj_rest_auth.views.LoginView
    'JWT_SERIALIZER': 'dj_rest_auth.serializers.JWTSerializer',
}


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # django rest framework
    'rest_framework',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'rest_framework_simplejwt.token_blacklist',
    'drf_yasg',
    'corsheaders',
    # for social login
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'api'
]

AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
    #    'django.contrib.auth.backends.ModelBackend',
)
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'timeline.middleware.MoveJWTCookieIntoTheBody',
    'timeline.middleware.MoveJWTRefreshCookieIntoTheBody',
]

ROOT_URLCONF = 'timeline.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'timeline.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
